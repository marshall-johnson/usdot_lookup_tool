"""Add User, Org, and membership

Revision ID: 3e69d7a9d560
Revises: 8f356b3d316d
Create Date: 2025-06-17 22:34:14.168821

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '3e69d7a9d560'
down_revision: Union[str, None] = '8f356b3d316d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

def upgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    op.create_table('apporg',
    sa.Column('org_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('org_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('org_id', name=op.f('apporg_pkey'))
    )
    op.create_table('appuser',
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('first_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('user_id', name=op.f('appuser_pkey'))
    )

    op.create_table('userorgmembership',
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('org_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['apporg.org_id'], name=op.f('userorgmembership_org_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['appuser.user_id'], name=op.f('userorgmembership_user_id_fkey')),
    sa.PrimaryKeyConstraint('user_id', 'org_id', name=op.f('userorgmembership_pkey'))
    )

    # Insert into apporg a default org
    op.execute(
        "INSERT INTO apporg (org_id, org_name, is_active) VALUES ('org_MeXxTWYD3BvxXZ7L', 'AIDOT', true)"  # Replace with actual default org ID and name
    )
    # Insert into appuser a default user
    op.execute(
        "INSERT INTO appuser (user_id, user_email, name, first_name, last_name, is_active) VALUES ('google-oauth2|111038474647971608436', 'hectormrejia@gmail.com', 'Hector Mejia', 'Hector', 'Mejia', true)"  # Replace with actual default user details
    )
    # Insert into userorgmembership a default membership
    op.execute(
        "INSERT INTO userorgmembership (user_id, org_id, is_active) VALUES ('google-oauth2|111038474647971608436', 'org_MeXxTWYD3BvxXZ7L', true)"  # Replace with actual default user ID and org ID
    )

    # Add column user_id to carrierengagementstatus and foreign key to appuser and apporg
    op.add_column('carrierengagementstatus', sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=True))

    # Fill the user_id column with a default value
    op.execute(
        "UPDATE carrierengagementstatus SET user_id = 'google-oauth2|111038474647971608436'"  # Replace with actual default user ID
    )
    # Alter the user_id column to be non-nullable
    op.alter_column('carrierengagementstatus', 'user_id', nullable=False)

    # Add foreign key to appuser and apporg in carrierengagementstatus
    op.create_foreign_key(op.f('carrierengagementstatus_user_id_fkey'), 'carrierengagementstatus', 'appuser', ['user_id'], ['user_id'])
    op.create_foreign_key(op.f('carrierengagementstatus_org_id_fkey'), 'carrierengagementstatus', 'apporg', ['org_id'], ['org_id'])

    # Add foreign key to appuser and apporg in ocrresult
    op.create_foreign_key(op.f('ocrresults_user_id_fkey'), 'ocrresult', 'appuser', ['user_id'], ['user_id'])
    op.create_foreign_key(op.f('ocrresults_org_id_fkey'), 'ocrresult', 'apporg', ['org_id'], ['org_id'])

def downgrade() -> None:
    """Upgrade schema."""

    # Drop column user_id from carrierengagementstatus and foreign key to appuser and apporg
    op.drop_constraint(op.f('carrierengagementstatus_user_id_fkey'), 'carrierengagementstatus', type_='foreignkey')
    op.drop_constraint(op.f('carrierengagementstatus_org_id_fkey'), 'carrierengagementstatus', type_='foreignkey')
    op.drop_column('carrierengagementstatus', 'user_id')

    # Drop foreign key to appuser and apporg in ocrresult
    op.drop_constraint(op.f('ocrresults_user_id_fkey'), 'ocrresult', type_='foreignkey')
    op.drop_constraint(op.f('ocrresults_org_id_fkey'), 'ocrresult', type_='foreignkey')

    op.drop_table('userorgmembership')
    op.drop_table('appuser')
    op.drop_table('apporg')




